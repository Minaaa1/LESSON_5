

// =========   КОНСПЕКТ УРОК 5   =========   


// i++     - сначало выведет 0 (так как i = 0) и только потом прибавит +1 
// ++i     - сначало прибавит прибавит +1, потом выведет i (0+1=1 = i)

// ANSWER to this (task): 

// 1) 
    // let i = 0;
    // i++     //- 1st line
    // console.log(i++); //- 2nd line
//     output?     =                    ans 1, because in 1st line 0+1 = 1, in 2nd line  console i = 1 

// 2)
// let i = 0;
// ++i // видит ++ и сразу плюсует, потом i выводит (+1+0 = 1)
// console.log(i++); // ans 1 ( первым видит  i и сразу выводит, а ++ игнорирует)

// 3)  ПОЧЕМУ НЕ 3 ПРИХОДИТ ЗДЕСЬ ??? :
/*
let i = 0;
i++;
console.log(++i);
++i;
 */




// ------------- ЦИКЛ WHILE 

// while( i < 3 ) {
//     console.log(i);
//     i++
// }

// Структура цикла while :
// 1 Итерация 
//  0 < 3
//  выводит 0
//  прибавляет +1 к i

// 2 Итерация 
//  1 < 3
//  выводит 1
//  прибавляет +1 к i

// 3 Итерация 
//  2 < 3
//  выводит 2
//  прибавляет +1 к i

// 3 < 3 не может быть, поэтому стоп ( 4 Итерация ) 





// ------------- КОНСТРУКЦИЯ DO, WHILE

// Она нам нужна когда вне зависимости от выполнения условий while мы должны совершить хотя бы одну итерацию

// В этом ПРИМЕРЕ условие не выполняется, но i один раз выводится :
// let i = 1;
// do {
//     console.log(i);
//     i++;
    
// } while (i < 0) 






// ------------- ЦИКЛ FOR 

// for(let i = 0; i<5; i++){
//     console.log(i);
// }





// ------------- ОПЕРАТОР BREAK 

// используется для того чтобы предотвратить бесконечный цикл

// let b = 0;
// for(;;) { // infinite cycle
//     b++
//     console.log(b);
//     break  // "аварийный тормоз"
// }   
// Result : 1
    
// ANOTHER usage EXAMPLE of break:
// let c = 0;
// for(;;) { 
//     b++
//     console.log(c);
//     if (c>10) {
//         break
//     }
// }





// ------------- ОПЕРАТОР CONTINUE

// Оператор continue используется, чтобы шагнуть на шаг вперёд в циклах 
// while, do-while, for или перейти к метке

// используется если необходимо прервать не весь цикл, а одну или более итераций

// for (let n = 0; n < 10; n++) {
//     if (n % 2 == 0) continue; // если четное число, то пропускаем и шагаем дальше
//     alert(n);
//     }
// RESULT: нечетные числа 1, 3, 5, 7, 9




 
// TASKS


// #1    Вывести строку данных от 1 до 50 с помощью цикла


//  ПЕРВЫЙ СПОСОБ:
// let i = 0;
// while (i < 50) {
//     ++i
//     console.log(i);
//     if (i >= 49) {
//         break
//         }
// }

//  ВТОРОЙ СПОСОБ:
// let i = 0;
// do {
//     console.log(++i);
// } while(i < 50)


//  ???? ТРЕТИЙ СПОСОБ: почему с 0 начинается, если ++i ?????? 

// for (let i = 0; i < 50; ++i) {
//     console.log(i);
// }   






// #2    Вывести числа от 50 до 25 с помощью цикла

//  ПЕРВЫЙ СПОСОБ:
// let i = 50;
// while (i > 25) {

//     console.log(i);
//     i--;
// }

//  ВТОРОЙ СПОСОБ:
// let i = 50;
// do {
//     console.log(i--);
// } while(i > 25)


//  ТРЕТИЙ СПОСОБ: почему с 0 начинается, если ++i ?
// for (let i = 50; i > 25; --i) {
//     console.log(i);
// }   


// #3    Вывести все нечетные числа от 2500 до 3000 с помощью цикла

//  ПЕРВЫЙ СПОСОБ:
// let n = 2500;
// while (n < 3000) {
//     n++;
// if ( n%2 == 0 ) continue;
//     console.log(n);

// }

//  ВТОРОЙ СПОСОБ:
// let i = 2500;
// do { 
//     i++;
//     if (i % 2 == 0) continue;
//     console.log(i);
// } while(i < 3000)


//  ТРЕТИЙ СПОСОБ: почему с 0 начинается, если ++i ?
for (let i = 2500; i < 3000; i++) {
    if (i % 2 == 0 ) continue;
    console.log(i);
}   